// <auto-generated />
using System;
using APZ_backend.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APZ_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240512123337_V6")]
    partial class V6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APZ_backend.Models.BrakingMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("InitialSpeed")
                        .HasColumnType("float");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<double>("SubsequentSpeed")
                        .HasColumnType("float");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("SuddenBraking");
                });

            modelBuilder.Entity("APZ_backend.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("FORMAT(GETDATE(), 'dd.MM.yyyy HH:mm')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("APZ_backend.Models.EngineSpeedMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AvgEngineSpeed")
                        .HasColumnType("float");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("EngineSpeeds");
                });

            modelBuilder.Entity("APZ_backend.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("DangerousLeftTurns")
                        .HasColumnType("int");

                    b.Property<int>("DangerousRightTurns")
                        .HasColumnType("int");

                    b.Property<int>("FastStart")
                        .HasColumnType("int");

                    b.Property<int>("LeftTurns")
                        .HasColumnType("int");

                    b.Property<int>("RightTurns")
                        .HasColumnType("int");

                    b.Property<DateTime>("TripEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TripStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("APZ_backend.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("APZ_backend.Models.Subordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ChiefId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("FORMAT(GETDATE(), 'dd.MM.yyyy HH:mm')");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ChiefId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Subordinates");
                });

            modelBuilder.Entity("APZ_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("en");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("FORMAT(GETDATE(), 'dd.MM.yyyy HH:mm')");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APZ_backend.Models.BrakingMoment", b =>
                {
                    b.HasOne("APZ_backend.Models.Record", "Record")
                        .WithMany("SuddenBraking")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("APZ_backend.Models.Car", b =>
                {
                    b.HasOne("APZ_backend.Models.User", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("APZ_backend.Models.EngineSpeedMoment", b =>
                {
                    b.HasOne("APZ_backend.Models.Record", "Record")
                        .WithMany("EngineSpeeds")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("APZ_backend.Models.Record", b =>
                {
                    b.HasOne("APZ_backend.Models.Car", "Car")
                        .WithMany("Records")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("APZ_backend.Models.Sensor", b =>
                {
                    b.HasOne("APZ_backend.Models.Car", "Car")
                        .WithOne("Sensor")
                        .HasForeignKey("APZ_backend.Models.Sensor", "CarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APZ_backend.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("APZ_backend.Models.Subordinate", b =>
                {
                    b.HasOne("APZ_backend.Models.Car", "Car")
                        .WithMany("Drivers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APZ_backend.Models.User", "Chief")
                        .WithMany("Subordinates")
                        .HasForeignKey("ChiefId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Chief");
                });

            modelBuilder.Entity("APZ_backend.Models.Car", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Records");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("APZ_backend.Models.Record", b =>
                {
                    b.Navigation("EngineSpeeds");

                    b.Navigation("SuddenBraking");
                });

            modelBuilder.Entity("APZ_backend.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
