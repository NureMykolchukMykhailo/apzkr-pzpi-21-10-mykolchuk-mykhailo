Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра «Програмної інженерії»

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для розрахунку  коефіцієнта  якості стилю водіння автомобіля

Студент гр. ПЗПІ-21-10                        __________________ Микольчук М.В.
                                                                                          (підпис)
Керівник роботи                                   ___________________ доц. Лещинська І.О.
                                                                                          (підпис)

Роботу захищено «30»     травня    2024 р.
з оцінкою _________________________

Комісія:                                              ___________________ доц. Лещинський В.О.
                                                                                     (підпис)
_____________________ доц. Лещинська І.О.
                                                                                     (підпис)
____________________ ст.викл. Сокорчук І.П.
                                                                                     (підпис)


Харків, 2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук	   Кафедра програмної інженерії		
Спеціальність 121 – Інженерія програмного забезпечення				
Курс 		3	 Семестр 				6					
Навчальна дисципліна Архітектура програмного забезпечення

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

				Микольчуку Михайлу Володимировичу			
1. Тема проекту: 		Програмна система розрахунку коефіцієнта якості стилю водіння автомобіля								
2. Термін узгодження завдання курсової роботи « 18»_  березня        2024 р.
3. Термін здачі студентом закінченої роботи «8»         червня                   2024 р.
4. Вихідні дані до проекту: : потрібно розробити унікальну складну програмну систему, яка складається з серверної, клієнтської, мобільної та IoT частин, передбачає монетизацію, вирішує актуальну проблему, орієнтована на масового користувача, масштабована, підтримує інтернаціоналізацію та локалізацію, забезпечує захист персональних даних, має засоби адміністрування системи.
5.Зміст пояснювальної записки (перелік питань, що належить розробити)
Пояснювальна записка повинна містити текстовий опис прийнятих  інженерних рішень, методів взаємодії програмних  компонент та методів обробки даних. Вона повинна містити вступ, аналіз предметної області, постановку задачі, проектування програмного проекту, структуру бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки						
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) схема бази даних, діаграма варіантів використання, діаграма розгортання,
інтерфейс головної сторінки
КАЛЕНДАРНИЙ ПЛАН


№	Назва етапів курсової роботи	Терміни виконання етапів роботи	Примітка
1	Функціональна специфікація
програмного проекту	28.03.2024	Виконано
2	Проектування програмного
проекту	11.04.2024	Виконано
3	Кодування програмного проекту	25.04.2024	Виконано
4	Оформлення пояснювальної
записки	23.05.2024	Виконано
5	Захист курсової роботи	30.05.2024	Виконано

	Дата видачі завдання «18»  	березня	 	2024 р.

Керівник 	                      _____________________ доц. Лещинська І.О.
                                                                                 (підпис)
			

Завдання прийняв до виконання
ст. гр. ПЗПІ-21-10                             			            Микольчук М.В	
	                                                                           (підпис)







РЕФЕРАТ


Пояснювальна записка до курсової роботи:  52 с.,  9 рис., 3 табл., 7 додатків, 8 джерел.
ЗАСТОСУНОК, АВТОМОБІЛЬ, КОЕФІЦІЄНТ ЯКОСТІ ВОДІННЯ, ПІДЛЕГЛИЙ ВОДІЙ, ПОЇЗДКА, АНАЛІЗ.

Об’єктом дослідження даної роботи є розрахунок коефіцієнта якості стилю водіння автомобіля. Це питання є досить актуальним у сучасному світі, бо розуміння професійності водія та його вмінь керувати транспортним засобом суттєво підвищує безпеку на дорозі.
Метою курсової роботи є розробка складної програмної системи, яка дозволить розрахувати коефіцієнт якості стилю водіння шляхом аналізу кожної поїздки водія і збирання статистики. За допомогою спеціальних датчиків система зможе реєструвати такі показники як: надто довгий час роботи двигуна на високих або низьких обертах, кількість небезпечних поворотів, моменти різкого гальмування.
В якості технологій розробки для серверної частини застосований веб-фреймворк ASP.NET Core та мова програмування C# з об’єктно-реляційною проекцією Entity Framework Core. Для розробки коду для IoT застосунку була застосована мова програмування C#. Для передачі великої кількості повідомлень з датчиків на сервер використана платформа потокової передачі подій Apache Kafka. Мобільний застосунок розроблений на мові програмування Kotlin за допомогою середи розробки Android Studio.
У результаті виконання курсової роботи розроблена програмна система, яка дозволить визначити коефіцієнт якості стилю водіння автомобіля. Система складається з наступних компонентів: серверна частина, IoT пристрій, мобільний застосунок.


ЗМІСТ


ВСТУП	6
1 АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ	8
1.1 Вимогу до бізнесу	8
1.1.1	Передумови	8
1.1.2	Можливості для бізнесу	9
1.1.3	Бізнес цілі та критерії для успіху	10
1.1.4.	Потреби клієнтів або ринку	11
1.1.5.	Бізнес ризики	12
1.2. Бачення рішення	13
1.2.1   Окреслення концепції	13
1.2.2. Основні особливості	14
1.2.3 Припущення та залежності	14
1.3 Рамки та обмеження	15
1.3.1 Обсяг початкового випуску	15
1.3.2. Обсяг наступних випусків	16
1.3.3. Обмеження та виключення	17
1.4 Бізнес-контекст	18
1.4.1 Профілі зацікавлених сторін	18
1.4.2 Пріоритети проекту	19
1.4.3 Робоче середовище	21
2 ПРОЕКУВАННЯ ПРОГРАМНОЇ СИСТЕМИ	22
2.1 Загальне проектування системи	22
2.1.1 Опис функціоналу, доступного користувачам	23
2.1.2 Опис розгортання системи	25
2.2 Проектування серверної частини	27
2.3 Проектування застосунку для Smart Device	29
2.4 Проектування мобільного застосунку	31
3 КОДУВАННЯ ПРОГРАМНОЇ СИСТЕМИ	34
3.1 Загальне кодування системи	34
3.2 Кодування серверної частини	35
3.3 Кодування застосунку для Smart Device	37
3.4 Кодування мобільного застосунку	37
ВИСНОВКИ	38
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАНЬ	39
ДОДАТОК А	41
ДОДАТОК Б	44
ДОДАТОК В	46
ДОДАТОК Г	47
ДОДАТОК Д	48
ДОДАТОК Е	50
ДОДАТОК Ж	52





























ВСТУП


В сучасному світі автомобілі є невід'ємною частиною повсякденного життя будь-якої людини. Водночас безпека на дорогах залишається критично важливою проблемою. Було б добре, якби існував інструмент, завдяки якому можна виміряти рівень професійності водія, передивитися аналіз кожної його поїздки та зробити висновки стосовно безпечності стилю його водіння. Розробка програмної системи розрахунку коефіцієнта якості стилю водіння автомобіля дозволила б не лише оцінити, але й підвищити якість водіння, що, в свою чергу, може значно знизити кількість дорожньо-транспортних пригод. Водії, отримуючи об'єктивні оцінки свого стилю водіння, зможуть свідомо коригувати свої звички, що сприятиме безпечнішій поведінці на дорозі.
Економічна ефективність також є важливим аспектом. Якісний стиль водіння дозволяє знизити витрати на паливо та технічне обслуговування автомобіля. Акуратніший водій зменшує знос деталей машини, що дозволяє рідше звертатися до автосервісу та економити кошти на ремонті.
Метою курсової роботи є створення програмної системи розрахунку коефіцієнта якості стилю водіння автомобіля. Вона дозволить стежити за результатами свого водіння, або водіння інших людей, наприклад підлеглих водіїв, в реальному часі. 
Такого роду система повинна включати в себе такі частини як: серверна частина, IoT частина, мобільний застосунок. В якості мови програмування для серверної частини використовувалась мова C#, фреймворк для розробки веб-застосунків ASP.NET Core. Для розробки програмного коду для IoT частини також використовувалась мова C#. Для мобільного застосунку була використана мова програмування для Android – Kotlin. В якості СУБД використовувався Microsoft SQL Server. Для роботи з великою кількістю подій від датчиків використовувався розподілений програмний брокер повідомлень Apache Kafka.
У ході виконання роботи була створена складна програмна система, що дозволяє відстежувати якість водіння, аналізувати результати поїздок користувачів системи. Вона вирішує актуальну на сьогодні проблему і складається з серверної частини, IoT частини та мобільного застосунку.

























1 АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1 Вимогу до бізнесу


1.1.1	Передумови


	У наш час, коли автомобілі стають все більш поширеним та важливим засобом пересування, забезпечення безпеки на дорогах стає пріоритетним завданням. Не всім одразу зрозуміло, які помилки вони допускають при водінні автомобіля, так само як і не всім зрозуміло як ці помилки можна виправити або не допустити. Водіям, особливо початківцям, хотілося б мати змогу передивлятись різного роду інформацію про те, як вдало пройшла поїздка та стежити за тим як  розвивається їх навик водіння. Розвиток технологій у галузі автомобільної безпеки відіграє ключову роль у покращенні цієї ситуації. У цьому контексті програмні системи, здатні аналізувати та оцінювати стиль водіння автомобіля, стають надзвичайно корисними.
	Така система здатна розраховувати коефіцієнт якості стилю водіння, надає користувачеві можливість отримати зворотний зв'язок свого стилю водіння. Вона може аналізувати різні аспекти керування, такі як швидкість, прискорення, гальмування, повороти та інші, і надавати користувачеві детальні дані про його поведінку на дорозі.


1.1.2	Можливості для бізнесу	


	Така система може бути особливо корисною для водіїв, які прагнуть покращити свій стиль водіння з метою підвищення безпеки на дорогах, економії палива та зниження зносу автомобіля. Користувач може отримати рекомендації щодо покращення свого стилю водіння на основі аналізу даних, що надаються системою.
	Більше того, подібні системи можуть бути корисними для логістичних компаній та власників автопарків, які можуть використовувати дані про стиль водіння для оптимізації маршрутів, контролю за продуктивністю водіїв та зниження операційних витрат.
	З урахуванням зростання інтересу до екологічно чистих транспортних засобів такі системи також можуть бути корисні для оцінки екологічної ефективності водіння, що допоможе водіям і компаніям знизити негативний вплив на навколишнє середовище.
	Аналізуючи конкурентів та існуючи аналоги, слід виділити систему контролю водіїв Eco Driving[1]. Це застосунок на базі Wialon, що дозволяє оцінити професіоналізм водія. Рішення дає оцінку рівня якості водіння, ґрунтуючись на штрафних балах, одержаних за певні порушення: перевищення швидкості, необґрунтоване прискорення та гальмування, прискорення при вході в поворот тощо. Порушення фіксують датчики, встановлені на транспортному засобі. Отримані дані допомагають дисциплінувати та навчати водіїв.
	Іншим відомим провідником такого роду послуг є Geotab[2] – провідний світовий постачальник рішень для моніторингу та керування транспортними засобами. Geotab пропонують комплексні програмні та апаратні рішення, які дозволяють компаніям ефективно відстежувати свої транспортні ресурси, оптимізувати маршрути, покращувати безпеку та економити на експлуатаційних витратах. Geotab пропонує широкий спектр апаратних пристроїв, включаючи GPS-трекери та датчики, що встановлюються на транспортні засоби. Ці пристрої збирають дані про місцезнаходження, швидкість, прискорення, гальмування, обороти двигуна в реальному часі.



1.1.3	Бізнес цілі та критерії для успіху


	Бізнес-цілі:
–	Знизити витрати на обслуговування на 30% за рік у порівнянні з попереднім роком.
–	Збільшення рівня задоволеності клієнтів, приймаючи до уваги їх поради та побажання.
–	Кожен рік збільшувати кількість активних користувачів на 50% від попереднього року.
–	Персоналізувати послуги системи в залежності від потреб клієнтів.
	Критерії успіху:
–	Збільшення кількості активних користувачів на 50% у порівнянні з попереднім роком.
–	Отримання від 100 000 активних клієнтів компанії.
–	Загальне збільшення коефіцієнта якості водіння серед користувачів системи, зменшення рівня аварій та небезпечних випадків на дорогах у місцях де зосереджена велика кількість наших клієнтів.
–	Інтеграція як мінімум з трьома відомими логістичними компаніями впродовж двох років.


1.1.4.	Потреби клієнтів або ринку


	Споживачами продукту можуть бути будь-які фізичні або юридичні особи, які пов’язані з автомобілями, а також з перевезеннями, логістикою, обслуговуванням транспортних засобів, навчанням нових водіїв.
	Клієнти зацікавлені в системі, яка допоможе водіям покращити свій стиль водіння для підвищення безпеки на дорогах та економії ресурсів, включаючи паливо. Багато логістичних компаній з транспортними засобами також зацікавлені в управлінні та оптимізації роботою водіїв та автомобілів. У зв'язку з зростанням інтересу до екологічно чистих транспортних засобів клієнти також цікавляться оцінкою та покращенням екологічної ефективності свого водіння. Такі системи допомагають не тільки підвищити безпеку на дорогах та заощадити ресурси, а й знизити негативний вплив на довкілля. Автовиробники можуть зацікавитися у використанні такої системи для надання додаткових послуг своїм клієнтам, наприклад, персоналізованих рекомендацій з водіння або програм лояльності.


1.1.5.	Бізнес ризики


–	Велика конкуренція на ринку.
	На ринку існує ряд аналогічних продуктів, які вже гарно зарекомендували себе серед споживачів, вони вже мають лояльну клієнтську базу. Це може призвести до того, що потенційні клієнти будуть вибирати більш популярні або більш прості та дешеві продукти, що може ускладнити просування системи.
	Для зменшення ризику слід зосередити концентрація на унікальних перевагах системи, поквапитися про впровадження ефективної маркетингової стратегії та залучення клієнтів на ранніх етапах розробки.
–	Технічні проблеми.
	При розробці та впровадженні системи можуть виникнути технічні проблеми. Це може призвести до затримок у розробці, зниження якості системи або навіть до її відмови.
	Для зменшення такого роду ризику слід залучати досвідчені команди розробників та тестувати систему на всіх етапах розробки.
–	Негативне ставлення водіїв.
Деякі водії можуть сприйняти систему як порушення їхнього особистого простору або контролю над робочим процесом.
Важливо провести навчання та інформування водіїв про цілі та переваги системи, а також врахувати їх зворотний зв'язок при розробці та впровадженні.
–	Недостатня адаптація та навчання користувачів.
Важливим аспектом успішного впровадження системи є навчання користувачів та їх адаптація до нової технології. Якщо користувачі не розуміють переваг і функцій системи, це може спричинити її неправильне використання або навіть відмову від неї. 
Для вирішення цієї проблеми необхідно провести навчальні курси та тренінги для користувачів, надати їм підтримку та консультації в процесі впровадження та використання.


1.2. Бачення рішення


1.2.1   Окреслення концепції


Програмна система націлена на те, щоб задовольняти потреби як індивідуальних водіїв, так і корпоративних клієнтів. Ми пропонуємо інструмент, який допомагає покращити безпеку на дорогах, знизити витрати на паливо та експлуатацію автомобілів, а також покращити ефективність роботи транспортних парків. Ми прагнемо до створення інноваційного продукту, який не лише задовольнятиме потреби клієнтів, але й привноситиме позитивні зміни в суспільстві, зробивши дороги безпечнішими.
	Користувач зможе стежити за показниками свого автомобіля в реальному часі за допомогою свого мобільного пристрою, переглядати результати попередніх поїздок та порівнювати їх, фіксуючи прогрес якості водіння. Він може переглядати такі параметри як коефіцієнт плавності оберту руля, плавності старту автомобіля, кількість часу роботи двигуна на надто великих або надто малих обертах, кількість часу в простої, плавність натискання газу та тормозу. На основі цих параметрів розраховується коефіцієнт якості водіння впродовж поїздки та якості водіння цього водія загалом.


1.2.2. Основні особливості


	До основного функціоналу програмної системи для розрахунку  коефіцієнта  якості стилю водіння автомобіля є стеження за показниками роботи автомобіля в реальному часі та їх аналіз для відображення в зручному та зрозумілому для користувача вигляді. Основні функції включають в себе:
–	Збереження особистих параметрів користувача в особистому кабінеті - особистий кабінет може містити різні поля для збереження параметрів користувача, такі як ім’я, дата реєстрації, електронна пошта.
–	Створення, видалення, зміна автомобілів користувача.
–	Додавання, видалення, зміна IoT пристроїв до своїх автомобілів.
–	Перегляд даних, переданих з датчиків автомобілів прямо впродовж руху в реальному часі.
–	Перегляд історії поїздок і їх результатів.
–	Можливість вибору мови сторінки (англійська або українська).
–	Можливість придбати додаткові послуги по аналізу результатів поїздок з рекомендаціями для водія.
–	Можливість завжди звернутися до технічної підтримки в разі помилок або для того щоб отримати зворотній зв’язок. 
–	Розрахунок коефіцієнта якості водіння автомобіля впродовж поїздки, а також загального коефіцієнту якості водіння цього водія на основі аналізу даних поїздок.
–	Відстеження прогресу стосовно якості водіння автомобіля.


1.2.3 Припущення та залежності


Припущення та залежності передбачають розгляд можливостей роботи або удосконалення роботи сервісу. Основні залежності роботи та можливі удосконалення по роботі можуть бути наступними:
–	Така високонавантажена система має бути побудована з використанням сучасних технологій розробки з можливістю масштабування.
–	Система має бути стійка, враховуючи неперервні потоки даних на сервера.
–	Продукт може виконувати свої задачі тільки при постійному підключенні до мережі. 
–	При подальшому розвитку системи можливе розширення параметрів, які збираються з автомобіля.
–	Можливе надання користувачам більше контролю над своїми даними. Вони повинні мати можливість контролювати дані, які система збирає про них, обирати які дані збирати, а які не збирати.
–	Можлива інтеграція системи з іншими системами, які пов’язані з цією предметною областю, наприклад з інфраструктурою патрульної поліції та сервісних центрів МВС.
–	В подальших випусках можливе впровадження рейтингової системи водіїв, заохочення користувачів за гарне водіння додатковими балами.


1.3 Рамки та обмеження


1.3.1 Обсяг початкового випуску


	У першому випуску продукту основний функціонал буде виглядати наступним чином:
–	Mobile частина являє собою застосунок для користувача (водія автомобіля або власника автомобілів, якщо користувачем є, наприклад, логістична компанія). 
–	IoT пристрій зчитує параметри автомобіля впродовж поїздки, робить первинну обробку та передає їх на сервер.
–	Основна обробка даних та взаємодія з базою даних відбуваються на стороні серверу. Сервер це центральна частина, до якої звертаються всі інші частини сервісу.
	Більш детально для кожної частини: 
	Mobile частина:
–	Реєстрація та авторизація користувачів в системі.
–	Створення, видалення, зміна автомобілів.
–	Додавання, видалення, зміна IoT пристроїв до автомобілів.
–	Перегляд історії результатів поїздок.
–	Розрахунок коефіцієнта якості водіння автомобіля впродовж поїздки та загальний коефіцієнт якості водіння на основі параметрів поїздок.
	IoT пристрій зчитує параметри поїздки, робить первинну обробку та відправляє на сервер.
	Серверна частина містить основну логіку обробки даних від IoT пристроїв. Вона взаємодіє з мобільним застосунком та IoT пристроями, відправляє та приймає дані від них.
	Система локалізована, тобто підтримає декілька мов (Англійську, Українську). Особисті дані користувача захищені сучасними стандартами захисту: авторизація відбувається за допомогою JWT токенів, паролі в базі даних зашифровані, з’єднання з сервером відбувається по протоколу HTTPS.
1.3.2. Обсяг наступних випусків


	У майбутніх версіях продукту планується включити в систему функціонал надання користувачам більше контролю над своїми даними. Вони повинні мати можливість контролювати дані, які система збирає про них, обирати які дані збирати, а які не збирати.
	Також планується розширення спектру даних, які система збирає і аналізує, впровадження рейтингової системи водіїв та інтеграція системи з іншими системами, які пов’язані з цією предметною областю.


1.3.3. Обмеження та виключення


	Список функцій, які можуть бути потрібні зацікавленій стороні, але які не планується включати до нового продукту:
–	Функція аналізу та порівняння стилів водіння між різними моделями та марками автомобілів. Цей функціонал може бути корисним для автовиробників, дослідницьких організацій чи автомобільних журналістів, які цікавляться порівнянням та аналізом характеристик та поведінки різних автомобілів на дорозі. За допомогою цієї функції можна було б збирати дані про стиль водіння власників різних моделей автомобілів та порівнювати їх між собою, виявляючи особливості та відмінності у поведінці різних автомобілів на дорозі.
–	Можливість аналізу та порівняння даних про стиль водіння з іншими параметрами, такими як погодні умови, стан дороги або технічний стан автомобіля. Цей функціонал може бути корисним для дослідницьких організацій, університетів або державних установ, які цікавляться впливом різних факторів на стиль водіння та безпеку на дорогах. Аналізуючи дані про стиль водіння в контексті інших параметрів, можна виявляти закономірності та тенденції, а також розробляти рекомендації та стратегії для підвищення безпеки та ефективності на дорогах.


1.4 Бізнес-контекст


1.4.1 Профілі зацікавлених сторін


Для кращого розуміння аудиторії, що зацікавлена у розробці даного програмного продукту, ми запропонуємо створити таблицю (див. таблицю 1.1), в якій будуть вказані їхні основні інтереси, цінності, ставлення до проекту і обмеження.

Таблиця 1.1 – Профілі зацікавлених сторін
Зацікавлена сторона	Головна
цінність	Ставлення	Головний інтерес	Обмеження
Керівники проекту	Отримання прибутку	Розглядають продукт як спосіб заробітку та отримання нових заказів	Стрімко вийти на ринок розробки автоматизованих програмних систем	Проект має бути створений за 4 місяці




Продовження таблиці 1.1
Зацікавлена сторона	Головна
цінність	Ставлення	Головний інтерес	Обмеження
Користувачі проекту	Користь, зручність використання, конфіденційність.	Зручний і простий у використанні інструмент для розуміння якості водіння автомобіля.	Візуально бачити свої недоліки та помилки водіння автомобіля, для того щоб мати можливість їх виправити	Необхідно бути постійно під’єднаним до мережі інтернету.
Розробники проекту	Розвиток проекту і збільшення заробітної плати	Розглядають проект як спосіб просунутись кар'єрними сходами та заробити грошей	Написання чистого та зрозумілого коду	Необхідно побудувати відмовостійку архітектуру для обробки даних в реальному часі.


1.4.2 Пріоритети проекту


	Для визначення плану робіт, пріоритетів, якості програмного продукту та необхідного функціоналу, заповнимо таблицю пріоритетів проекту (див. таблицю 1.2).
Таблиця 1.2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
План робіт	Первинний реліз програмної системи має бути доступний 08.06.2024		Дозволяється відставання від графіку виконання на 7 днів
Функціональність	Система реалізує всі обговореним вище функціональні вимоги	Система не містить зайвого функціоналу, тобто функціоналу, який не обговорений у вимогах до системи	90% функцій із високим пріоритетом мають бути включені до випуску 1.0
Якість	Система повинна працювати швидко та якісно. Усі збої або форс-мажорні випадки мають бути зведені до мінімума.		Помилки роботи мають бути виявлені на етапі розробки 
Персонал		Максимальний розмір команди: 3 розробники та 1 тестувальник	

Продовження таблиці 1.2
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
Ціна			Допустимо перевищити  бюджет на 15% без перегляду робіт


1.4.3 Робоче середовище


	Система для розрахунку  коефіцієнта  якості стилю водіння автомобіля має свої вимоги щодо доступності, надійності, продуктивності та цілісності:
–	Користувачі системи будуть розташовані в різних регіонах світу, отже треба щоб система була доступна в будь-який час доби.
–	Система має бути масштабованою, бо ставить перед собою завдання обробки великої кількості неперервних потоків даних.
–	Перебої в системі не бажані, але й не критичні. Від її роботи не залежить здоров’я людей, вона тільки формує рекомендації.
–	Система повинна забезпечувати захист даних від несанкціонованого доступу, використання та розкриття, використовувати сучасні способи захисту даних. 
	В якості основних технологій розробки були обрані наступні технології:
–	C# ASP.NET Core для Backend частини. Серверна частина є центральною в системі, з нею взаємодіють всі інші частини.
–	Мобільний застосунок буде реалізований на Kotlin, це найкраще рішення розробки під Android.
–	IoT частина являє собою Raspberry Pi одноплатний комп’ютер. На нього буде встановлено середовище виконання IL коду – CLR. Вихідний код буде написаний на C#.
	Дані зберігаються у СУБД MS SQL Server. Сервер взаємодіє з БД через ORM Entity Framework Core.





















2 ПРОЕКУВАННЯ ПРОГРАМНОЇ СИСТЕМИ
2.1 Загальне проектування системи


2.1.1 Опис функціоналу, доступного користувачам


Спочатку слід описати загальний функціонал системи, що можуть робити користувачі в системі, як можливість щось зробити залежить від їхньої ролі. Для опису поведінки системи використовується UML діаграма прецедентів. Загальна діаграма для користувачів наведена на рисунку 2.1. Вона описує базовий функціонал доступний усім користувачам.

 
Рисунок 2.1 – Діаграма прецедентів для «Користувача»

	Головним актором системи є «Користувач». Абстрактний «Користувач» містить в собі три більш ситуативні ролі: звичайний користувач, власник компанії та адміністратор. Всі подальші ролі наслідують можливості від «Користувача» і розширюють їх. «Користувач» має можливості реєстрації та подальшого входу в систему, може додавати до системи власні автомобілі, датчики, редагувати свій профіль. Доданий датчик можна під’єднати до автомобіля, це дозволить почати відслідковувати та аналізувати показники водіння людини, яка їздить на цьому автомобілі. Для кожного автомобіля користувач може переглянути історію поїздок та статистику кожної з них.
	Актор «Датчик (Smart Device)» представляє собою пристрій, який на фізичному рівні під’єднується до автомобіля, і на програмному рівні встановлює зв’язок між цим автомобілем та датчиком. Протягом поїздки датчик в реальному часі передає дані, зчитані з автомобіля, у спеціальну платформу потокової передачі подій. На рисунку 2.2 наведено розширений функціонал для кожної ролі.

 
Рисунок 2.2 – Діаграма прецедентів для адміністратора, власника компанії та звичайного користувача

	Актор «Власник компанії» відрізняється від звичайного користувача тим, що він може мати підлеглих водіїв, додавати їх до системи та налаштовувати зв’язок між ними та доданими автомобілями. Роль звичайного користувача передбачає особисте використання одного або декількох автомобілів без функціоналу підлеглих водіїв. Визначення ролі «Власник компанії» чи «Звичайний користувач» відбувається на етапі реєстрації. 
	Актор «Адміністратор» є адміністратором системи. «Адміністратор» має змогу переглядати записи та вносити зміни в базу даних системи, наприклад переглянути всіх зареєстрованих в системі користувачів, їх автомобілі. Також він може отримувати статистику по роботі системи, переглядати логи роботи серверу та кластеру потокової передачі подій.


2.1.2 Опис розгортання системи


Діаграма розгортання ілюструє спосіб розташування елементів чи компонентів системи на апаратному забезпеченні та їх взаємодію. За допомогою цієї діаграми інженери та розробники можуть отримати уявлення про те, як програмне забезпечення взаємодіє з обладнанням і визначити вимоги до виконавчого середовища. Діаграму розгортання наведено на рисунку 2.3.
Back-end та база даних системи розташовані в приватній віртуальній мережі Google Cloud Platform. Це забезпечує максимальну можливу швидкість взаємодії цих частин системи між собою та безпеку даних, що між ними передаються, тому що ці частини системи спілкуються між собою всередині мережі Google, не виходячи в публічний Інтернет простір. Back-end та база даних мають тільки приватні IP-адреси, що не дозволяє звернутися до них ззовні.
В якості СУБД використовується Microsoft SQL Server. Це популярна в Enterprise розробці та надійна в використанні СУБД.
В якості платформи для розробки Backend частини використовується фреймворк ASP.Net Core, мова програмування C#. Backend частина являє собою API, до якого звертаються всі інші частини системи. Доступ до бази даних відбувається за допомогою об'єктно-реляційної проекції Entity Framework Core.
Кластер платформи потокової передачі подій Apache Kafka взаємодіє з серверною частиною та датчиком у автомобілі за допомогою власного двійкового протоколу, працюючого на основі TCP протоколу. Це дозволяє миттєво передавати величезні об’єми даних.
Датчик у автомобілі являє собою Raspberry pi одноплатний комп'ютер з встановленою на нього середою виконання CLR. Це дозволяє спростити розробку і використовувати мову програмування C#, а не більш складні мови, такі як C або C++.  

 
Рисунок 2.3 – Діаграма розгортання програмної системи

Мобільний застосунок розроблено за допомогою мови програмування для Android - Kotlin. Застосунок можливо завантажити на будь-який пристрій під операційною системою Android. З серверною частиною він взаємодію через HTTPS запити.


2.2 Проектування серверної частини


Для кращого розуміння почнемо зі створення UML діаграми компонентів (див. рисунок 2.4). Вона дозволяє промоделювати високорівневу архітектуру системи, ідентифікувати основні компоненти та їх зв’язки.

 
Рисунок 2.4 – UML діаграма компонентів серверної частини програмної системи

На діаграмі проілюстровані компоненти та їх залежності:
–	Компонент акаунта користувача;
–	Компонент серверної частини застосунку;
–	Компонент користувача;
–	Компонент автомобіля;
–	Компонент датчику;
–	Компонент підлеглого водія;
–	Компонент звіту про поїздку;
В якості СУБД було обрано реляційну базу даних MS SQL Server. Даний тип баз даних було обрано через те, що вони дозволяють побудувати стійкі залежності між даними за допомогою таблиць, що сприяє цілісності даних та забезпеченню транзакційної безпеки[5][6]. СУБД MS SQL Server підтримується компанією Microsoft, що означає що вона має велику спільноту користувачів, багату документацію та постійні покращення функціоналу. Загалом MS SQL Server це дуже популярне рішення в Enterprise розробці.
ER-модель - модель даних, що дозволяє описувати концептуальні схеми предметної галузі. ER-модель використовується при високорівневому проектуванні бази даних. З її допомогою можна виділити ключові сутності та позначити зв'язки, які можуть встановлюватись між цими сутностями. 
ER-діаграма програмної системи містить 7 сутностей. Діаграма наведена на рисунку 2.5.

 
Рисунок 2.5 – ER-діаграма сутностей бази даних програмної системи

ER-модель містить такі сутності:
-	Користувач: Поле «Role» визначає чи є користувач системи звичайним користувачем або адміністратором. Поле «Type» визначає чи є користувач звичайним водієм або власником компанії з підлеглими водіями.
-	Автомобіль: Описує автомобіль, доданий користувачем до системи. Автомобілю можна призначити тільки один датчик і одного або декількох водіїв;
-	Підлеглий водій: Описує водія, якого користувач додав до системи. Водію можна призначити автомобіль, причому тільки один.
-	Датчик: Описує датчик, доданий користувачем до системи. Датчик можна під’єднати до автомобіля. Після цього при поїздці на цьому автомобілі будуть аналізуватися показники поїздки;
-	Звіт: Сутність звіту являє собою сукупність даних, які були розраховані при аналізі поїздки. Сутність містить такі показники як кількість небезпечних поворотів, час роботи двигуна на надвисоких або наднизьких обертах, моменти різкого гальмування;
-	Момент різкого гальмування: Містить в собі дані про те, коли було здійснено гальмування, яка була початкова та кінцева швидкість;
-	Момент роботи двигуна: Фіксує час початку роботи двигуна на високих або низьких обертах, розраховує середню кількість обертів на хвилину в цей проміжок часу.


2.3 Проектування застосунку для Smart Device


Для опису поведінки IoT частини системи використовується UML діаграма прецедентів. Діаграма наведена на рисунку 2.6.

 
Рисунок 2.6 – Діаграма прецедентів IoT частини

	Головним актором системи є «Smart Device». «Smart Device», тобто датчик має можливості зачитування відповідних даних з автомобіля протягом поїдки та відправки їх у платформу потокової передачі подій. Перед відправкою дані агрегуються.
	Актор «Користувач» може змінювати налаштування датчика, а саме змінювати критичні значення для поїздки, наприклад яку швидкість вважати максимальною, які оберти двигуна вважати надто високими.
Актор «Адміністратор» може змінювати IP-адресу брокеру Kafka та назву топіку Kafka.
Діаграма діяльності використовується для моделювання динамічних аспектів системи. Вона дозволяє відобразити послідовність дій або потоків управління у системі, бізнес-процесі або між користувачами. Діаграма роботи IoT частини наведена на рисунку 2.7.

 
Рисунок 2.7 – Діаграма діяльності IoT частини

На діаграмі наведений процес зчитування, агрегації та відправки даних в Apache Kafka. При завершенні поїздки відправляється спеціальне повідомлення, завдяки якому сервер зрозуміє, що поїздка саме цього автомобіля завершена і можна переходити до аналізу станів. Код цієї діяльності наведений в додатку Д.


2.4 Проектування мобільного застосунку


Мобільний клієнтський застосунок містить користувацький інтерфейс для користувачів системи, які не є адміністраторами, тобто переважної більшості користувачів.
Для опису поведінки мобільного застосунку та можливостей користувачів використовується UML діаграма прецедентів. Діаграма наведена на рисунку 2.8.

 
Рисунок 2.8 – Діаграма прецедентів Mobile частини

	Головним актором мобільного застосунку є «Користувач». Користувач може авторизуватися в системі, а якщо він ще не зареєстрований – зареєструватися. Після авторизації він зможе подивитися зареєстровані ним автомобілі, датчики та підлеглих водіїв. Він може передивитися детальну інформацію по кожній з цих сутностей, додати нову сутність. Підлеглому водію можна призначити один з автомобілів, тоді в інформації про автомобіль він з’явиться в якості одного з водіїв цього автомобіля. Водій може бути під’єднаним тільки до одного автомобіля, але у автомобіля може бути декілька водіїв. Також до автомобіля можна під’єднати датчик, тоді після закінчення поїздки буде зроблений її аналіз і за автомобілем закріпиться звіт по поїздці. У одного автомобіля може бути один датчик.
Діаграма діяльності використовується для моделювання динамічних аспектів системи. Вона дозволяє відобразити послідовність дій або потоків управління у системі, бізнес-процесі або між користувачами. Діаграма наведена на рисунку 2.9.

 
Рисунок 2.9 – UML діаграма діяльності Mobile частини програмної системи

	На діаграмі можемо бачити процес роботи мобільного застосунку. Неавторизований користувач має авторизуватися, а якщо в нього ще немає акаунта – зареєструватися.
	Після авторизації відкриється головна активність, з якої можна потрапити в активності перегляду автомобілів, датчиків, підлеглих водіїв. Навігація у застосунку здійснюється на допомогою навігаційного меню.
	З кожної активності перегляду сутностей можна або перейти до додавання нової такої сутності, або до детального перегляду окремої сутності зі списку. Після того, як всі дії будуть виконані, застосунок можна закрити.

























3 КОДУВАННЯ ПРОГРАМНОЇ СИСТЕМИ
3.1 Загальне кодування системи


Весь вихідний код всіх компонентів системи було завантажено до відповідного репозиторію на GitHub[3]. Крім того, було створено відеоролик з функціональним тестуванням компонентів системи, який опублікували на платформі YouTube[4].


3.2 Кодування серверної частини


Розрахунок коефіцієнта якості водіння автомобіля передбачає високу відмовостійкість, масштабованість, швидкість обробки великого об’єму даних, тому що така предметна область може налічувати мільйони користувачів одночасно. Виходячи з цих вимог була спроектована система яка відповідає всім переліченим критеріям.
Серверна частина побудована за допомогою модульної платформи для розробки програмного забезпечення .Net. Фреймворк для написання веб-застосунків ASP.Net Core є найшвидшим  з точки зору швидкості виконання коду серед усіх своїх конкурентів. До того ж платформа .Net гарно інтегрована з вищеописаною СУБД MS SQL Server, бо це продукти однієї компанії, що робить .Net ще більш привабливим вибором. Таблиця кінцевих точок наведена в додатку А.
	Для обробки величезних потоків подій від автомобілів в реальному часі використовується розподілене сховище подій і платформа для їх багатопотокового оброблення Apache Kafka. В основі концепції Kafka лежить абстракція «набір повідомлень», яка передбачає групування повідомлення разом, щоб зменшити накладні витрати на транспортування по мережі. Це призводить до більших мережевих пакетів, більших послідовних операцій на диску та неперервних блоків пам'яті, що дозволяє Kafka перетворювати хаотичний потік випадкових повідомлень на лінійні записи. Таким чином забезпечується надвисока швидкість передачі даних. До того ж Kafka відмовостійка, бо дозволяє налаштовувати реплікації даних на різні брокери в кластері, і масштабована, бо передбачає горизонтальне масштабування. Таким чином, Apache Kafka це ідеальний варіант для обробки та зберігання нескінченних потоків подій, вона дуже часто використовується в системах, шо працюють з IoT пристроями.
	Серверна частина відповідає за всю бізнес-логіку програмної системи та побудована на основі принципів чистої архітектури.[7][8] Основна ідея цієї архітектури полягає в поділі системи на окремі рівні абстракції, що дозволяє забезпечити високу масштабованість, зручність тестування і підтримки, а також зменшити залежність між компонентами. Серверна частина складається з кількох шарів: ядро (містить сутності застосунку – моделі даних), інфраструктура (включає імплементацію бізнес-логіки та функції обробки даних), представлення (містить інтерфейс користувача або API, через який користувач взаємодіє з сервером).
	Бізнес-логіка представлена сервісом авторизації за допомогою JWT токенів та сервісом неперервного споживання подій з Apache Kafka. Токен авторизації формується після успішної автентифікації або після реєстрації в системі. Його клієнтський застосунок використовує при кожному запиті до сервера, додаючи в заголовки запиту. За допомогою цього токена сервер розуміє хто звертається та які права має користувач. Логіка генерації токена наведена в додатку Г.
	Сервіс споживання подій зареєстрований як фоновий сервіс, тому він виконується в окремому потоці і не заважає роботі основній частині серверу. Цей сервіс постійно слухає відповідну партицію топіку Apache Kafka і споживає події. Кожну подію він додає в список. Коли автомобіль користувача системи вимикається, тобто коли поїздка завершена, сервіс робить копію списку станів автомобіля та відсилає на обробку в окремий потік, який потім вставить результат обробки як звіт в базу даних. Такий підхід дозволяє постійно споживати нові дані з Kafka, не витрачаючи час на обробку в цьому ж потоці. Логіка слухання подій Kafka заведена в додатку Б. Потік обробки станів автомобіля аналізує отримані дані за спеціальними алгоритмами та вставляє в звіт інформацію про такі показники, як наприклад кількість небезпечних поворотів, кількість моментів різкого гальмування, час роботи двигуна на надто високих обертах та інше. Логіка генерації звіту наведена в додатку В.


3.3 Кодування застосунку для Smart Device


Smart Device частина програмної системи являє собою датчик, який зчитує дані з автомобіля в реальному часі. Отримані дані датчик відправляє у спеціальну платформу потокової передачі даних Apache Kafka. Для цього датчик повинен бути постійно під’єднаним до мережі Інтернет. Протягом роботи датчик виводить в консоль дані, зчитані з автомобіля. Для передачі даних в Kafka використовується власний двійковий Kafka протокол, працюючий на основі TCP.
Датчик може бути налаштований користувачем та адміністратором, у кожного свої параметри налаштування. Звичайний користувач може змінити дані, які варіюються для окремих автомобілів, наприклад максимальну швидкість та оберти двигуна. Адміністратор може змінити IP-адресу Kafka брокеру та топіку, до якого поступають дані. Логіка ініціалізації налаштувань наведена в додатку Ж.
Перед тим як змінити налаштування або передивитися їх користувачам потрібно авторизуватися. Пристрій звернеться до серверу та перевірить чи існує такий користувач. Логіка авторизації наведена в додатку Е. 
Код датчика написаний на C#, що максимально спрощує розробку та дозволяє не піклуватися про виділення пам’яті. 

3.4 Кодування мобільного застосунку


Мобільний застосунок був розроблений в якості користувацького інтерфейсу, щоб користувачі могли взаємодіяти з серверною частиною через GUI. Застосунок розроблений для операційної системи Android. Це найбільш поширена платформа для мобільних пристроїв. Застосунок взаємодіє з серверною частиною по протоколу HTTP. Застосунок підтримує локалізацію. Доступні англійська та українська мови.
Для кодування цієї чистини програмної системи використовувалась мова програмування Kotlin. Розробка велася в середовищі розробки Android Studio.
Всередині застосунку моделі даних, функціонал звернення до серверної частини та функціонал відображення відокремлені один від одного. Звернення до сервера йде через контролери, моделі даних знаходяться в директорії моделей, функціонал відображення даних знаходяться в директорії користувацького інтерфейсу. Такий підхід відповідає шаблону проектування MVC (Модель–представлення–контролер), він спрощує внесення майбутніх змін або розширення проекту, а також забезпечує можливість повторного використання окремих компонентів. Використання цього шаблону у великих системах сприяє впорядкованості їхньої структури та робить їх більш зрозумілими завдяки зменшенню складності.
Авторизація здійснюється за допомогою JWT токенів. Користувач надсилає на сервер адресу своєї електронної пошти та пароль, сервер у відповідь формує токен, в якому зашифрований ідентифікатор користувача в базі даних. Токен зберігається у файлі налаштувань SharedPreference. Коли користувач звертається до сервера, токен розміщується в заголовках HTTP запиту, сервер розшифровує токен та розуміє хто до нього звернувся.


ВИСНОВКИ


В результаті виконання курсової роботи була створена спроектована та реалізована складна програмна система для розрахунку коефіцієнта якості стилю водіння автомобіля. Розроблена система дозволяє визначати рівень професійності водіїв транспортних засобів шляхом аналізу їх поїздок та дозволяє скористатися послугами сервісу в повному обсязі користувачу.
	Шляхом аналізу предметної області та потреб користувачів такого роду системи був розроблений Vision and Scope документ, який містить детальний опис бачення рішення, обмежень, бізнес ризиків та потреб ринку. На його основі приймалися необхідні для існування та підтримки проекту інженерні рішення. Система складається з серверної частини, Smart Device частини та мобільного застосунку. Система надійна, відмовостійка, масштабована. В ній передбачена безпека даних користувачів та підтримка локалізації інтерфейсу. Завдяки правильно прийнятим рішенням стосовно архітектури, система може витримувати велику кількість користувачів одночасно та обробляти великі потоки даних без затримок. Кодування системи відбувалося приймаючи до уваги сучасні методи розробки програмного забезпечення, з використанням сучасних мов програмування та технологій. Це спростить підтримку проекту та дозволить впроваджувати нові рішення за необхідності.
Отже, розроблений програмний продукт допомагає бажаючим вимірювати свій рівень водіння автомобіля, дивитися аналіз та статистику поїздки. Такого роду система буде особливо корисна водіям-початківцям та власникам компаній або підприємств, де задіяна велика кількість автомобілів, наприклад логістичним. Система є важливим кроком до підвищення безпеки, економічної ефективності, екологічної свідомості та загальної культури водіння. Вона відкриває нові горизонти для вдосконалення індивідуальних навичок водіїв і сприяє створенню безпечнішого та відповідальнішого дорожнього середовища.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАНЬ


1. Eco Driving: a solution for driving behavior monitoring. Eco Driving. URL: https://wialon.com/en/eco-driving (дата звернення: 21.03.2024).
2. One platform for optimal fleet performance. Geotab. URL: https://www.geotab.com/ (дата звернення: 21.03.2024).
3. GitHub - NureMykolchukMykhailo/apzkr-pzpi-21-10-mykolchuk-mykhailo. GitHub. URL: https://github.com/NureMykolchukMykhailo/apzkr-pzpi-21-10-mykolchuk-mykhailo  (дата звернення: 06.06.2024).
4. Михайло Микольчук. Apzkr-pzpi-21-10-mykolchuk-mykhailo, 2024. YouTube. URL: https://www.youtube.com/watch?v=WnQwHw-HXFE (дата звернення: 06.06.2024).
5.	Гарсия-Молина, Гектор, Ульман, Джеффри, Уидом, Дженнифер, Системы баз данных. Полный курс.: Пер. С англ.. М.:Издательский дом „Вильямс”, 2003. 1088 с.
6.	Ульман Дж. Основы реляционных баз данных: пер. с англ. / Дж. Ульман. – К.: Лори, 2006. –  376 с. 
7. Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.
8. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999. – 464 с.
 
ДОДАТОК А
Специфікація REST


Таблиця А.1 – Специфікація REST API серверної частини системи
Контролер	Метод	Маршрут	Опис
Authorization	POST	api/authorizeUser	Авторизація користувачів
		api/authorizeSubordinate
	Авторизація підлеглих водіїв
Registration	POST	api/registerUser	Зареєструвати користувача
		api/registerSubordinate	Зареєструвати підлеглого водія
User	GET	User/all	Отримати всіх користувачів
		User/{id}	Отримати користувача по ідентифікатору
	POST	User/changeLng	Змінити мову інтерфейсу користувача
	PUT	User/Update	Оновити користувача
	DELETE	User/Delete	Видалити користувача
Car	GET	Car /all	Отримати всі автомобілі
		Car /{id}	Отримати автомобіль по ідентифікатору
		Car /byOwner	Отримати всі автомобілі користувача
	POST	Car/insert	Додати автомобіль
	PUT	Car/update	Оновити автомобіль
	DELETE	Car/delete	Видалити автомобіль



Продовження таблиці А.1
Контролер	Метод	Маршрут	Опис
Record	GET	Record /all	Отримати всі звіти
		Record /{id}	Отримати звіт по ідентифікатору
		Record/byCar	Отримати всі звіти по цьому автомобілю
	POST	Record/insert	Додати звіт
	DELETE	Record/delete	Видалити звіт
	PUT	Record/update	Оновити звіт
Sensor	GET	Sensor/all	Отримати всі датчики
		Sensor/{id}	Отримати датчик по ідентифікатору
		Sensor/byOwner	Отримати всі датчики відповідного користувача
		Sensor/freeByOwner	Отримати всі непід’єднані до автомобілів датчики відповідного користувача
	POST	Sensor/insert	Додати датчик в систему
		Sensor/connectToCar	Під’єднати датчик до автомобіля
		Sensor/disconnectFromCar	Роз’єднати датчик з автомобілем
	DELETE	Sensor/delete	Видалити датчик
	PUT	Sensor/update	Оновити датчик





Продовження таблиці А.1
Контролер	Метод	Маршрут	Опис
Subordinate	GET	Subordinate /all	Отримати всіх підлеглих водіїв
		Subordinate /{id}	Отримати підлеглого водія по ідентифікатору
		Subordinate/byChief	Отримати всіх підлеглих водіїв відповідного користувача
	POST	Subordinate/connectToCar	Додати водія до автомобіля
		Subordinate/disconnectFromCar	Зняти водія з автомобіля
		Subordinate/changeLng	Змінити мову інтерфейсу для водія
	PUT	Subordinate/update	Оновити водія
	DELETE	Subordinate/delete	Видалити водія













ДОДАТОК Б
Фоновий сервіс слухання подій з Apache Kafka


01. protected override async Task ExecuteAsync(CancellationToken stoppingToken)
02. {
03.     await Task.Yield();
04. 
05.     var config = new ConsumerConfig
06.     {
07.         BootstrapServers = "localhost:9092",
08.         GroupId = "my-consumer-group",
09.         AutoOffsetReset = AutoOffsetReset.Earliest
10.     };
11. 
12.     List<State> states = new();
13. 
14.     using (var consumer = new ConsumerBuilder<Null, string>(config).Build())
15.     {
16.         consumer.Subscribe("apz");
17. 
18.         while (!stoppingToken.IsCancellationRequested)
19.         {
20.             try
21.             {
22.                 var result = consumer.Consume(stoppingToken);
23.                 string message = result.Message.Value;
24. 
25.                 if (message == "Finished")
26.                 {
27.                     var statesCopy = new List<State>(states);
28.                     Thread producerThread = new(() =>
29.                     {
30.                         Handle(statesCopy);
31.                     });
32. 
33.                     producerThread.Start();
34.                     states.Clear();
35.                     Console.WriteLine(states.Count());
36.                     continue;
37.                 }
38. 
39.                 states.Add(
40.                     JsonSerializer.Deserialize<State>(
41.                         result.Message.Value));
42.                 Console.WriteLine("added");
43.             }
44.             catch (OperationCanceledException)
45.             {
46.                 break;
47.             }
48.         }
49.     }
50. }
 
 






























 
ДОДАТОК В
Обробка списку станів автомобіля в окремому потоці


01. private void Handle(List<State> states)
02. { 
03.     using (var scope = services.CreateScope())
04.     {
05.         var context = scope.ServiceProvider.GetRequiredService<DatabaseContext>();
06. 
07.         Car? car = context.Cars
08.             .Where(car => car.SensorId == states[1].DeviceId)
09.             .FirstOrDefault();
10. 
11.         if (car is not null)
12.         {
13.             (int leftTurns, int rightTurns) = TurnsLeftAndRight(states);
14.             (int dangerousLeftTurns, int dangerousRightTurns) = 
15.                 DangerousTurnsLeftAndRirht(states);
16.             (List<EngineSpeedMoment> low, List<EngineSpeedMoment> high) = 
17.                 LowAndHighEngineSpeeds(states);
18.             int fastStart = FastStart(states);
19.             List<BrakingMoment> suddenBraking = SuddenBraking(states);
20. 
21.             Record record = new()
22.             {
23.                 Car = car,
24.                 TripStart = states.First().EngineStarted,
25.                 TripEnd = states.Last().Time,
26.                 LeftTurns = leftTurns,
27.                 RightTurns = rightTurns,
28.                 DangerousLeftTurns = dangerousLeftTurns,
29.                 DangerousRightTurns = dangerousRightTurns,
30.                 EngineSpeeds = low.Concat(high).ToList(),
31.                 FastStart = fastStart,
32.                 SuddenBraking = suddenBraking
33.             };
34. 
35.             record.Dump();
36. 
37.             context.Records.Add(record);
38.             context.SaveChanges();
39.         }
40.     }
41. }
         
ДОДАТОК Г
Логіка генерації JWT токенів


01. private static object GenerateToken(int userId, string lang, LoginData loginData)
02. {
03.     var claims = new List<Claim> {
04.         new Claim(ClaimTypes.Name, loginData.email),
05.         new Claim(ClaimTypes.NameIdentifier, userId.ToString()),
06.         new Claim(ClaimTypes.Locality, lang)
07.     };

08.     var jwt = new JwtSecurityToken(
09.         issuer: Environment.GetEnvironmentVariable("Auth-Issuer"),
10.         audience: Environment.GetEnvironmentVariable("Auth-Audience"),
11.         claims: claims,
12.         expires: DateTime.UtcNow.Add(TimeSpan.FromHours(10)),
13.         signingCredentials: new SigningCredentials(
14.             new SymmetricSecurityKey(
15.                 Encoding.UTF8.GetBytes(
16.                     Environment.GetEnvironmentVariable("Auth-Key")
17.                 )
18.             ), 
19.             SecurityAlgorithms.HmacSha256
20.         )
21.     );

22.     var encodedJwt = new JwtSecurityTokenHandler()
23.         .WriteToken(jwt);

24.     var response = new
25.     {
26.         access_token = encodedJwt,
27.         username = loginData.email,
28.         lang = lang
29.     };

30.     return response;
31. }



ДОДАТОК Д
Головний метод роботи Smart Device пристрою


01. static async Task Main(string[] args)
02. {
03.     await AppSettingsHelper.StartSettingsDialog();
04. 
05.     InitializeSettings();
06. 
07.     var config = new ProducerConfig
08.     {
09.         BootstrapServers = KafkaServer,
10.     };
11. 
12.     random = new Random();
13. 
14.     Stack<State> states = new();
15. 
16.     states.Push(new State()
17.     {
18.         DeviceId = DeviceId,
19.         SteeringWheelAngle = 0,
20.         SteeringWheelCount = 0,
21.         ReturnWheelToBase = false,
22.         Time = DateTime.Now,
23.         EngineStarted = DateTime.Now,
24.         EngineSpeed = MinEngineSpeed
25.     });
26. 
27.     using (var producer = new ProducerBuilder<Null, string>(config).Build())
28.     {
29.         while (!Console.KeyAvailable)
30.         {
31.             State newState = GenerateStateV2(states.Pop());
32.             states.Push(newState);
33. 
34.             newState.Dump();
35.             producer.Produce(KafkaTopic, new Message<Null, string> 
36.             { 
37.                 Value = JsonSerializer.Serialize(newState) 
38.             });
39. 
40.             Thread.Sleep(TimeInterval);
41.         }
42.         producer.Produce(KafkaTopic, new Message<Null, string> 
43.         { 
44.             Value = "Finished" 
45.         });
46.     }
47. }


















































ДОДАТОК Е
Логіка авторизації користувачів


01. public static async Task<(bool, bool)> Authenticate(string email, string password)
02. {
03.     using (HttpClient client = new())
04.     {
05.         try
06.         {
07.             var adminSettings = AppSettingsHelper.GetAdminSettings();
08. 
09.             string baseUrl = adminSettings.AuthorizationAdress;
10. 
11.             string url = $"{baseUrl}?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}";
12. 
13.             HttpContent content = new StringContent("");
14. 
15.             HttpResponseMessage response = await client.PostAsync(url, content);
16. 
17.             response.EnsureSuccessStatusCode();
18. 
19.             string responseBody = await response.Content.ReadAsStringAsync();
20.             if (responseBody != "Wrong email or password")
21.             {
22.                 Console.WriteLine("Success");
23.                 User user = JsonSerializer.Deserialize<User>(responseBody, 
24.                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
25.                 if (user.Role == "Admin")
26.                     return (true, true);
27. 
28.                 return (true, false);
29.             }
30.             Console.WriteLine("Wrong email or password");
31.             return (false, false);
32.         }
33.         catch (HttpRequestException e)
34.         {
35.             Console.WriteLine(e.Message);
36.             return (false, false);
37.         }
38.     }
39. }

















































ДОДАТОК Ж
Метод ініціалізації налаштувань



01. public const int TimeInterval = 200; //m/s
02. private static Random random;
03. 
04. static int DeviceId;
05. 
06. static int MaxEngineSpeed;
07. static int MinEngineSpeed;
08. 
09. static int MaxAcceleration;
10. static int MinAcceleration;
11. static double MaxSpeed; // m/s
12. 
13. static string KafkaServer;
14. static string KafkaTopic;
15. 
16. static void InitializeSettings()
17. {
18.     UserSettings uSettings = AppSettingsHelper.GetUserSettings();
19.     AdminSettings aSettings = AppSettingsHelper.GetAdminSettings();
20. 
21.     DeviceId = Convert.ToInt32(uSettings.DeviceId);
22.     MaxAcceleration = Convert.ToInt32(uSettings.MaxAcceleration);
23.     MinAcceleration = Convert.ToInt32(uSettings.MinAcceleration);
24.     MaxSpeed = Convert.ToDouble(uSettings.MaxSpeed);
25.     MaxEngineSpeed = Convert.ToInt32(uSettings.MaxEngineSpeed);
26.     MinEngineSpeed = Convert.ToInt32(uSettings.MinEngineSpeed);
27. 
28.     KafkaServer = aSettings.BootstrapServers;
29.     KafkaTopic = aSettings.KafkaTopic;
30. }
